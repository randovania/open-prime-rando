{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "properties": {
        "$schema": {
            "type": "string",
            "format": "uri"
        },
        "worlds": {
            "type": "object",
            "properties": {
                "Great Temple": { "$ref": "#/$defs/world" },
                "Temple Grounds": { "$ref": "#/$defs/world" },
                "Agon Wastes": { "$ref": "#/$defs/world" },
                "Torvus Bog": { "$ref": "#/$defs/world" },
                "Sanctuary Fortress": { "$ref": "#/$defs/world" }
            },
            "default": {},
            "additionalProperties": false,
            "$comment": "The list of properties is replaced in runtime with all worlds in the provided ISO."
        },
        "small_randomizations": {
            "properties": {
                "seed": {
                    "type": "number",
                    "description": "Number to use as seed for the small randomizations"
                },
                "echo_locks": {
                    "type": "boolean",
                    "description": "Randomize the solution of the Annihilator+Echo Visor puzzles sound puzzles.",
                    "default": true
                },
                "minigyro_chamber": {
                    "type": "boolean",
                    "description": "Randomize the solution of the puzzle in Minigyro Chamber.",
                    "default": true
                },
                "rubiks": {
                    "type": "boolean",
                    "description": "Randomize the solution of the color puzzles in Main Gyro Chamber.",
                    "default": true
                }
            },
            "additionalProperties": false,
            "required": [
                "seed"
            ]
        },
        "area_patches": {
            "type": "object",
            "properties": {
                "rebalance_world": {
                    "type": "boolean",
                    "description": "Apply patches that rebalance aspects of the game for a better rando experience",
                    "default": true
                }
            },
            "description": "Pre-written patches for specific areas",
            "default": {}
        },
        "inverted": {
            "type": "boolean",
            "description": "Inverts Light and Dark Aether",
            "default": false
        },
        "auto_enabled_elevators": {
            "type": "boolean",
            "description": "Set elevators to be activated on room load",
            "default": false
        },
        "cosmetics": {
            "type": "object",
            "properties": {
                "suits": {
                    "type": "object",
                    "properties": {
                        "varia": {
                            "$ref": "#/$defs/suit_skin"
                        },
                        "dark": {
                            "$ref": "#/$defs/suit_skin"
                        },
                        "light": {
                            "$ref": "#/$defs/suit_skin"
                        }
                    },
                    "additionalProperties": false,
                    "$comment": "Choose from a number of custom suit textures"
                }
            },
            "additionalProperties": false,
            "required": [
                "suits"
            ]
        }
    },
    "required": [
        "small_randomizations",
        "cosmetics"
    ],
    "additionalProperties": false,
    "$defs": {
        "world": {
            "type": "object",
            "properties": {
                "areas": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "$ref": "#/$defs/area"
                        }
                    }
                }
            },
            "required": ["areas"],
            "additionalProperties": false,
            "$comment": "The list of areas is replaced in runtime with the existing areas of each specific world."
        },
        "area": {
            "type": "object",
            "properties": {
                "docks": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "$ref": "#/$defs/dock"
                        }
                    },
                    "default": {},
                    "$comment": "The list of docks is replaced in runtime with the existing docks of each specific area."
                },
                "layers": {
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "boolean"
                        }
                    },
                    "default": {},
                    "$comment": "The list of layers is replaced in runtime with the existing layers of each specific area."
                },
                "low_memory_mode": {
                    "type": "boolean",
                    "default": false,
                    "$comment": "Some areas are riding the memory/object limit. Certain patches will account for these limitations if this flag is set."
                },
                "new_name": {
                    "type": ["string", "null"],
                    "default": null,
                    "$comment": "If set, rename the area to this value"
                },
                "elevators": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "instance_id": {
                                "type": "integer"
                            },
                            "target_assets": {
                                "$ref": "#/$defs/area_identifier"
                            },
                            "target_strg": {
                                "type": ["integer", "null"],
                                "default": null
                            },
                            "target_name": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "instance_id",
                            "target_assets",
                            "target_name"
                        ],
                        "additionalProperties": false
                    },
                    "default": []
                }
            },
            "additionalProperties": false
        },
        "dock": {
            "type": "object",
            "properties": {
                "connect_to": {
                    "type": "object",
                    "properties": {
                        "area": {
                            "type": "string"
                        },
                        "dock": {
                            "type": "string"
                        }
                    },
                    "required": ["area", "dock"],
                    "additionalProperties": false
                },
                "old_door_type": {
                    "$ref": "#/$defs/dock_type"
                },
                "new_door_type": {
                    "$ref": "#/$defs/dock_type"
                }
            },
            "default": {},
            "additionalProperties": false
        },
        "dock_type": {
            "type": "string",
            "enum": [
                "Normal",
                "Dark",
                "Light",
                "Annihilator",
                "Disabled",
                "Missile",
                "SuperMissile",
                "PowerBomb",
                "SeekerMissile",
                "ScrewAttack",
                "Bomb",
                "Boost",
                "Grapple",
                "Darkburst",
                "Sunburst",
                "SonicBoom",
                "AgonEnergy",
                "TorvusEnergy",
                "SanctuaryEnergy",
                "DarkVisor",
                "EchoVisor",
                "Cannon",
                "Charge",
                "Power"
            ]
        },
        "area_identifier": {
            "type": "object",
            "properties": {
                "world_asset_id": {
                    "type": "integer"
                },
                "area_asset_id": {
                    "type": "integer"
                }
            }
        },
        "pickup": {
            "type": "object",
            "properties": {
                "location": {
                    "$ref": "#/$defs/location_data"
                },
                "appearance": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "model": {
                                "$ref": "#/$defs/model_data"
                            },
                            "sound": {
                                "$ref": "#/$defs/asset_id",
                                "$comment": "Actually a sound ID, but who's counting"
                            },
                            "jingle": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "pattern": "^.*?\\.dsp$"
                                    },
                                    "volume": {
                                        "type": "number",
                                        "minimum": 0.0,
                                        "maximum": 100.0
                                    }
                                },
                                "required": [
                                    "file",
                                    "volume"
                                ],
                                "additionalProperties": false
                            },
                            "hud_text": {
                                "type": "string"
                            },
                            "scan": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "model",
                            "sound",
                            "jingle",
                            "hud_text",
                            "scan"
                        ],
                        "additionalProperties": false
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "progression": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "required_item": {
                                        "type": ["integer", "null"],
                                        "default": null
                                    },
                                    "resources": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "item": {
                                                    "type": "int"
                                                },
                                                "amount": {
                                                    "type": "int"
                                                }
                                            },
                                            "required": [
                                                "item",
                                                "amount"
                                            ],
                                            "additionalProperties": false
                                        },
                                        "minItems": 1
                                    }
                                },
                                "required": [
                                    "required_item",
                                    "resources"
                                ]
                            }
                        },
                        "converted": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "from_item": {
                                        "type": "integer"
                                    },
                                    "to_item": {
                                        "type": "integer"
                                    },
                                    "overwrite_target": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    },
                    "required": [
                        "progression",
                        "converted"
                    ],
                    "additionalProperties": false
                }
            },
            "required": [
                "location",
                "appearance",
                "resources"
            ],
            "additionalProperties": false
        },
        "location_data": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "standard",
                        "custom"
                    ]
                },
                "exclude_memo_from_removal": {
                    "type": "boolean",
                    "default": false
                },
                "original_model": {
                    "$ref": "#/$defs/model_data"
                },
                "connections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/connection"
                    },
                    "default": []
                },
                "removals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/instance_id"
                    },
                    "default": []
                },
                "required": [
                    "area",
                    "type",
                    "original_model"
                ]
            },
            "if": {
                "properties": { "type": { "const": "standard" } }
            },
            "then": {
                "properties": {
                    "instances": {
                        "type": "object",
                        "properties": {
                            "pickup": {
                                "$ref": "#/$defs/instance_id"
                            },
                            "hud_memo": {
                                "$ref": "#/$defs/instance_id"
                            },
                            "streamed_audio": {
                                "$ref": "#/$defs/instance_id"
                            },
                            "sound": {
                                "$ref": "#/$defs/instance_id"
                            },
                            "audio_fade": {
                                "$ref": "#/$defs/instance_id"
                            }
                        },
                        "required": [
                            "pickup",
                            "hud_memo",
                            "streamed_audio",
                            "sound",
                            "audio_fade"
                        ],
                        "additionalProperties": false
                    }
                },
                "required": ["instances"]
            },
            "else": {
                "properties": {
                    "position": {
                        "$ref": "#/$defs/vec3"
                    },
                    "collision_size": {
                        "$ref": "#/$defs/vec3",
                        "default": {"x": 1.0, "y": 1.0, "z": 1.0}
                    },
                    "collision_offset": {
                        "$ref": "#/$defs/vec3",
                        "default": {"x": 0.0, "y": 0.0, "z": 0.0}
                    },
                    "layer": {
                        "type": "string",
                        "default": "Default"
                    }
                },
                "required": ["position"]
            },
            "unevaluatedProperties": false
        },
        "model_data": {
            "type": "string",
            "enum": [
                "PowerBeam",
                "ChargeBeam",
                "DarkBeam",
                "LightBeam",
                "AnnihilatorBeam",
                "SuperMissile",
                "Darkburst",
                "Sunburst",
                "SonicBoom",
                "CombatVisor",
                "ScanVisor",
                "DarkVisor",
                "EchoVisor",
                "VariaSuit",
                "DarkSuit",
                "LightSuit",
                "MassiveDamage",
                "MorphBall",
                "BoostBall",
                "CannonBall",
                "SpiderBall",
                "MorphBallBomb",
                "PowerBomb",
                "PowerBombExpansion",
                "MissileExpansion",
                "MissileExpansionShiny",
                "MissileExpansionPrime1",
                "MissileLauncher",
                "SeekerLauncher",
                "ScrewAttack",
                "EnergyTransferModule",
                "BeamAmmoExpansion",
                "AmberTranslator",
                "CobaltTranslator",
                "EmeraldTranslator",
                "VioletTranslator",
                "CrimsonTranslator",
                "ObsidianTranslator",
                "PearlTranslator",
                "DarkTempleKey",
                "AgonTempleKey",
                "TorvusTempleKey",
                "SanctuaryTempleKey",
                "SkyTempleKey",
                "DarkBeamAmmoExpansion",
                "LightBeamAmmoExpansion",
                "UnlimitedBeamAmmo",
                "UnlimitedMissiles",
                "MissileExpansionLarge",
                "EnergyTankSmall",
                "Offworld"
            ]
        },
        "vec3": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                }
            },
            "required": ["x", "y", "z"],
            "additionalProperties": false
        },
        "asset_id": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4294967295,
            "default": 4294967295
        },
        "instance_id": {
            "type": "integer",
            "minimum": 0,
            "maximum": 16777215
        },
        "fourcc": {
            "type": "string",
            "pattern": "^[A-Z0-9 !]{4}$"
        },
        "connection": {
            "type": "object",
            "properties": {
                "target": {
                    "$ref": "#/$defs/instance_id"
                },
                "state": {
                    "$ref": "#/$defs/fourcc",
                    "default": "ZERO"
                },
                "message": {
                    "$ref": "#/$defs/fourcc"
                }
            },
            "required": [
                "target",
                "message"
            ],
            "additionalProperties": false
        },
        "suit_skin": {
            "type": "string",
            "enum": [
                "player1",
                "player2",
                "player3",
                "player4"
            ],
            "default": "player1"
        }
    }
}
